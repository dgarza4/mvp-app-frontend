variables: 
  # DEV
  - name: DEV_ENV_NAME
    value: mvp-app-dev
  - name: DEV_URL
    value: https://mvp-app.cluster1.endvr-digital-dev.com
  - name: DEV_KEYCLOAK_URL
    value: https://keycloak.cluster1.endvr-digital-dev.com/auth
  - name: DEV_KEYCLOAK_REALM
    value: mvpapp
  - name: DEV_KEYCLOAK_CLIENT_ID
    value: mvp-app-frontend
  - name: DEV_S3_BUCKET_NAME
    value: endvr-d-mvp-app
  # PROD
  - name: PROD_ENV_NAME
    value: mvp-app-prod
  - name: PROD_URL
    value: https://someurl.com
  - name: PROD_KEYCLOAK_URL
    value: https://somekeycloakurl.com/auth
  - name: PROD_KEYCLOAK_REALM
    value: prodrealm
  - name: PROD_KEYCLOAK_CLIENT_ID
    value: prod-kc-client-id
  - name: PROD_S3_BUCKET_NAME
    value: prod-bucket-name


trigger:
- master

#schedules:
#- cron: "*/15 * * * *"
#  displayName: Fifteen minute content build
#  branches:
#    include:
#    - master 
#  always: true  

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: StagingDeploy
    displayName: "Deploy To Staging"
    jobs:
      - job: Build
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '10.x'
          - script: |
              yarn
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn install'
          - script: |
              export REACT_APP_API_URL=$(DEV_URL)/api/todo/v1
              export REACT_APP_KEYCLOAK_URL=$(DEV_KEYCLOAK_URL)
              export REACT_APP_KEYCLOAK_REALM=$(DEV_KEYCLOAK_REALM)
              export REACT_APP_KEYCLOAK_CLIENT_ID=$(DEV_KEYCLOAK_CLIENT_ID)
              yarn build-dev
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'Build deployable package'
          - publish: $(Build.Repository.LocalPath)/build
            artifact: StagingWebApp
      - deployment: StagingDeploy
        displayName: "Deploy"
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENV_NAME)
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: StagingWebApp
              - task: S3Upload@1
                displayName: 'Upload yarn build output to S3 bucket'
                inputs:
                  awsCredentials: 'CDP AWS Subscription'
                  regionName: 'us-east-2'
                  bucketName: $(DEV_S3_BUCKET_NAME)
                  sourceFolder: '$(Pipeline.Workspace)/StagingWebApp'
                  globExpressions: '**'
                  filesAcl: 'public-read'
      - job: Cypress
        dependsOn: StagingDeploy
        steps:
          - script: |
              yarn
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn install'          
          - script: |
              export CYPRESS_BASE_URL=$(DEV_URL)
              yarn run cy:test
              yarn run cy:merge
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn run cy:test'          
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/reports/merged.xml' 
              mergeTestResults: true
              failTaskOnFailedTests: false
              testRunTitle: Cypress Test Results
              publishRunAttachments: true
      - job: Lighthouse
        dependsOn: StagingDeploy
        steps:
          - task: Lighthouse@1
            inputs:
              url: $(DEV_URL)
              args: '--quiet'
              assertions: |
                no-vulnerable-libraries = 1
                robots-txt = 1
                speed-index > 0.5

  # - stage: ProductionDeploy
  #   displayName: "Deploy To Production"
  #   dependsOn:
  #     - StagingDeploy
  #   jobs:
  #     - job: Build
  #       steps:
  #         - task: NodeTool@0
  #           displayName: 'Install Node.js'
  #           inputs:
  #             versionSpec: '10.x'
  #         - script: |
  #             yarn
  #             if [ $? -ne 0 ]; then
  #                 exit 1
  #             fi
  #           displayName: 'yarn install'          
  #         - script: |   
  #             export REACT_APP_API_URL=$(PROD_URL)/api/todo/v1
  #             export REACT_APP_KEYCLOAK_URL=$(PROD_KEYCLOAK_URL)
  #             export REACT_APP_KEYCLOAK_REALM=$(PROD_KEYCLOAK_REALM)
  #             export REACT_APP_KEYCLOAK_CLIENT_ID=$(PROD_KEYCLOAK_CLIENT_ID)
  #             yarn build
  #             if [ $? -ne 0 ]; then
  #                 exit 1
  #             fi  
  #           displayName: 'Build deployable package'                    
  #         - publish: $(Build.Repository.LocalPath)/build
  #           artifact: ProductionWebApp
  #     - deployment: ProductionDeploy
  #       displayName: "Deploy"
  #       pool: 
  #         vmImage: 'ubuntu-latest'
  #       environment: $(PROD_ENV_NAME)
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #             - download: current
  #               artifact: ProductionWebApp
  #             - task: S3Upload@1
  #               displayName: 'Upload yarn build output to S3 bucket'
  #               inputs:
  #                 awsCredentials: 'CDP AWS Subscription'
  #                 regionName: 'us-west-2'
  #                 bucketName: $(PROD_S3_BUCKET_NAME)
  #                 sourceFolder: '$(Pipeline.Workspace)/ProductionWebApp'
  #                 globExpressions: '**'          
  #                 filesAcl: 'public-read'
  #             - task: AWSCLI@1
  #               displayName: 'Invalidate CDN caching of index.html'
  #               inputs:
  #                 awsCredentials: 'CDP AWS Subscription'
  #                 regionName: 'us-west-2'
  #                 awsCommand: 'cloudfront'
  #                 awsSubCommand: 'create-invalidation'   
  #                 awsArguments: '--distribution-id ELPJK0DT806PY --paths "/index.html"'
  #     - job: Cypress
  #       dependsOn: StagingDeploy
  #       steps:
  #         - script: |
  #             yarn
  #             if [ $? -ne 0 ]; then
  #                 exit 1
  #             fi
  #           displayName: 'yarn install'          
  #         - script: |
  #             export CYPRESS_BASE_URL=$(PROD_URL)
  #             yarn run cy:test
  #             yarn run cy:merge
  #             if [ $? -ne 0 ]; then
  #                 exit 1
  #             fi
  #           displayName: 'yarn run cy:test'          
  #         - task: PublishTestResults@2
  #           inputs:
  #             testResultsFormat: 'JUnit'
  #             testResultsFiles: '**/reports/merged.xml' 
  #             mergeTestResults: true
  #             failTaskOnFailedTests: false
  #             testRunTitle: Cypress Test Results
  #             publishRunAttachments: true
  #     - job: Lighthouse
  #       dependsOn: ProductionDeploy
  #       steps:
  #         - task: Lighthouse@1
  #           inputs:
  #             url: $(PROD_URL)
  #             args: '--quiet'
  #             assertions: |
  #               no-vulnerable-libraries = 1
  #               robots-txt = 1
  #               speed-index > 0.5