variables:
  # DEV
  - name: DEV_ENV_NAME
    value: dev-env-name
  - name: DEV_URL
    value: http://mvp-app.cluster1.endvr-digital-dev.com
  - name: DEV_S3_BUCKET_NAME
    value:  endvr-d-mvp-app
  - name: DEV_COGNITO_REGION
    value: us-west-2
  - name: DEV_COGNITO_POOL_ID
    value: us-west-2_KW1PfhGRt
  - name: DEV_COGNITO_CLIENT_ID
    value: 3cfglgilbik85k6rimev9ajn8l
  # PROD
  - name: PROD_ENV_NAME
    value: prod-env-name
  - name: PROD_URL
    value: https://someurl.com
  - name: PROD_S3_BUCKET_NAME
    value: prod-bucket-name
  - name: PROD_COGNITO_REGION
    value: prod-cognito-region
  - name: PROD_COGNITO_POOL_ID
    value: dev-cognito-pool-id
  - name: PROD_COGNITO_CLIENT_ID
    value: prod-cognito-client-id


trigger:
- master

#schedules:
#- cron: "*/15 * * * *"
#  displayName: Fifteen minute content build
#  branches:
#    include:
#    - master
#  always: true

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: StagingDeploy
    displayName: "Deploy To Staging"
    jobs:
      - job: Build
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '10.x'
          - script: |
              yarn
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn install'
          - script: |
              export REACT_APP_API_URL=$(DEV_URL)/api/todo/v1
              export REACT_APP_COGNITO_REGION=$(DEV_COGNITO_REGION)
              export REACT_APP_COGNITO_POOL_ID=$(DEV_COGNITO_POOL_ID)
              export REACT_APP_COGNITO_CLIENT_ID=$(DEV_COGNITO_CLIENT_ID)
              yarn build-dev
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'Build deployable package'
          - publish: $(Build.Repository.LocalPath)/build
            artifact: StagingWebApp
      - deployment: StagingDeploy
        displayName: "Deploy"
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENV_NAME)
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: StagingWebApp
              - task: S3Upload@1
                displayName: 'Upload yarn build output to S3 bucket'
                inputs:
                  awsCredentials: 'CDP AWS Subscription'
                  regionName: 'us-east-2'
                  bucketName: $(DEV_S3_BUCKET_NAME)
                  sourceFolder: '$(Pipeline.Workspace)/StagingWebApp'
                  globExpressions: '**'
                  filesAcl: 'public-read'
      - job: Cypress
        dependsOn: StagingDeploy
        steps:
          - script: |
              yarn
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn install'
          - script: |
              export CYPRESS_BASE_URL=$(DEV_URL)
              yarn run cy:test
              yarn run cy:merge
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn run cy:test'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/reports/merged.xml'
              mergeTestResults: true
              failTaskOnFailedTests: false
              testRunTitle: Cypress Test Results
              publishRunAttachments: true
      - job: Lighthouse
        dependsOn: StagingDeploy
        steps:
          - task: Lighthouse@1
            inputs:
              url: $(DEV_URL)
              args: '--quiet'
              assertions: |
                no-vulnerable-libraries = 1
                robots-txt = 1
                speed-index > 0.5

  - stage: ProductionDeploy
    displayName: "Deploy To Production"
    dependsOn:
      - StagingDeploy
    jobs:
      - job: Build
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '10.x'
          - script: |
              yarn
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn install'
          - script: |
              export REACT_APP_API_URL=$(PROD_URL)/api/todo/v1
              export REACT_APP_COGNITO_REGION=$(PROD_COGNITO_REGION)
              export REACT_APP_COGNITO_POOL_ID=$(PROD_COGNITO_POOL_ID)
              export REACT_APP_COGNITO_CLIENT_ID=$(PROD_COGNITO_CLIENT_ID)
              yarn build
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'Build deployable package'
          - publish: $(Build.Repository.LocalPath)/build
            artifact: ProductionWebApp
      - deployment: ProductionDeploy
        displayName: "Deploy"
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(PROD_ENV_NAME)
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: ProductionWebApp
              - task: S3Upload@1
                displayName: 'Upload yarn build output to S3 bucket'
                inputs:
                  awsCredentials: 'CDP AWS Subscription'
                  regionName: 'us-west-2'
                  bucketName: $(PROD_S3_BUCKET_NAME)
                  sourceFolder: '$(Pipeline.Workspace)/ProductionWebApp'
                  globExpressions: '**'
                  filesAcl: 'public-read'
              - task: AWSCLI@1
                displayName: 'Invalidate CDN caching of index.html'
                inputs:
                  awsCredentials: 'CDP AWS Subscription'
                  regionName: 'us-west-2'
                  awsCommand: 'cloudfront'
                  awsSubCommand: 'create-invalidation'
                  awsArguments: '--distribution-id ELPJK0DT806PY --paths "/index.html"'
      - job: Cypress
        dependsOn: ProductionDeploy
        steps:
          - script: |
              yarn
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn install'
          - script: |
              export CYPRESS_BASE_URL=$(PROD_URL)
              yarn run cy:test
              yarn run cy:merge
              if [ $? -ne 0 ]; then
                  exit 1
              fi
            displayName: 'yarn run cy:test'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/reports/merged.xml'
              mergeTestResults: true
              failTaskOnFailedTests: false
              testRunTitle: Cypress Test Results
              publishRunAttachments: true
      - job: Lighthouse
        dependsOn: ProductionDeploy
        steps:
          - task: Lighthouse@1
            inputs:
              url: $(PROD_URL)
              args: '--quiet'
              assertions: |
                no-vulnerable-libraries = 1
                robots-txt = 1
                speed-index > 0.5